AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Infrastructure
Resources:
#
# Network with 2 public subnet and 1 private subnet
#
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: 'VPC-P10'
#
# Create the private subnet
#
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Name
          Value: 'VPC-P10-private'
      VpcId: !Ref MyVPC
#
# Create the public subnet
#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: 'VPC-P10-public-a'
      VpcId: !Ref MyVPC
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 192.168.110.0/24
      Tags:
        - Key: Name
          Value: 'VPC-P10-public-b'
      VpcId: !Ref MyVPC
#
#  Gateway configuration with 2 NAT gateway and elastic IP
#  First Create and attache the gateway to the VPC
#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'VPC-P10-InternetGateway'
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
#
#  Create elastique IP for the NAT gateway
#
  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatEipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
#
#  Create the NAT gateway and attache elastique IP
#
  NatGatewayA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: MainVPC-nat-a
  NatGatewayB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: MainVPC-nat-b
#
#  Routing public configuration
#
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: VPC-P10-Public-route-a
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
#
# Create route table B
#
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: VPC-P10-Public-route-b
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
#
#  Routing private configuration
#
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: VPC-P10-Private-route-c
  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableC      
